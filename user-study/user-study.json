["def start(self):\n    if isinstance(self.bind_addr, tuple):\n        host, port = self.bind_addr\n        on_what = \"%s:%s\" % (host, port)\n    else:\n        on_what = \"socket file: %s\" % self.bind_addr\n    if self.running:\n        self.bus.log(\"Already serving on %s\" % on_what)\n        return\n    self.interrupt = None", "while len(pattern) < max:\n    for ch1 in char1:\n        for ch2 in char2:\n            for ch3 in char3:\n                if len(pattern) < max:\n                    pattern.append(ch1)\n                if len(pattern) < max:\n                    pattern.append(ch2)\n                if len(pattern) < max:\n                    pattern.append(ch3)", "import config\nimport numpy as np\nclass CMC:\n    def __init__(self,fileName):\n        f = open(fileName,'r')\n        self.kernel = np.zeros([config.NSTATES*config.NACTIONS,config.NSTATES])\n        self.matrix = np.zeros([config.NSTATES*config.NACTIONS,config.NSTATES])\n        for iRow in xrange(config.NSTATES*config.NACTIONS):\n            readline = f.readline()\n            probs = [float(x) for x in readline.split(\" \")]", "import wx\nclass MyFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, -1, \"My Frame\", size=(300, 300))\n        panel = wx.Panel(self, -1)", "from Categorie import Categorie\nfrom TypeMenu import TypeMenu\nfrom Panier import Panier\nfrom django import forms\nclass Menu(models.Model):\n    typeMenu = models.ForeignKey(TypeMenu, blank=False, null=False)\n    date = models.DateTimeField(auto_now_add = True, auto_now = True)\n    panier = models.ForeignKey(Panier, blank=False, null=False)\n    class Meta:\n        app_label = 'Commun'", "def predict(model, X_test, y_test):\n    classes = np.unique(y_test)\n    n_classes = classes.shape[0]\n    joint_log_likelihood = []\n    for i in range(n_classes):\n        jointi = np.log(model['class_prior'][i])\n        n_ij = - 0.5 * np.sum(np.log(2. * np.pi * model['var'][i, :]))\n        n_ij -= 0.5 * np.sum(((X_test - model['mean'][i, :]) ** 2) /\n                             (model['var'][i, :]), 1)\n        joint_log_likelihood.append(jointi + n_ij)", "largest = i\nif left_subtree < self.heap_size and \\\n   self.heap[left_subtree] > self.heap[i]:\n    largest = left_subtree\nif right_subtree < self.heap_size and \\\n   self.heap[right_subtree] > self.heap[largest]:\n    largest = right_subtree\nif largest != i:\n    (self.heap[i], self.heap[largest]) = (self.heap[largest], self.heap[i])\n    self.heapify(largest)", "from flask import Blueprint, render_template, request, jsonify, Response, abort\nfrom jinja2 import TemplateNotFound\nfrom functools import wraps\nfrom sqlalchemy import or_\nfrom psiturk.psiturk_config import PsiturkConfig\nfrom psiturk.experiment_errors import ExperimentError\nfrom psiturk.user_utils import PsiTurkAuthorization\nfrom psiturk.db import db_session, init_db\nfrom psiturk.models import Participant"]