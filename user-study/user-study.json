["def start(self):\n    if isinstance(self.bind_addr, tuple):\n        host, port = self.bind_addr\n        on_what = \"%s:%s\" % (host, port)\n    else:\n        on_what = \"socket file: %s\" % self.bind_addr\n    if self.running:\n        self.bus.log(\"Already serving on %s\" % on_what)\n        return\n    self.interrupt = None", "while len(pattern) < max:\n    for ch1 in char1:\n        for ch2 in char2:\n            for ch3 in char3:\n                if len(pattern) < max:\n                    pattern.append(ch1)\n                if len(pattern) < max:\n                    pattern.append(ch2)\n                if len(pattern) < max:\n                    pattern.append(ch3)", "import config\nimport numpy as np\nclass CMC:\n    def __init__(self,fileName):\n        f = open(fileName,'r')\n        self.kernel = np.zeros([config.NSTATES*config.NACTIONS,config.NSTATES])\n        self.matrix = np.zeros([config.NSTATES*config.NACTIONS,config.NSTATES])\n        for iRow in xrange(config.NSTATES*config.NACTIONS):\n            readline = f.readline()\n            probs = [float(x) for x in readline.split(\" \")]", "import wx\nclass MyFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, -1, \"My Frame\", size=(300, 300))\n        panel = wx.Panel(self, -1)", "from Categorie import Categorie\nfrom TypeMenu import TypeMenu\nfrom Panier import Panier\nfrom django import forms\nclass Menu(models.Model):\n    typeMenu = models.ForeignKey(TypeMenu, blank=False, null=False)\n    date = models.DateTimeField(auto_now_add = True, auto_now = True)\n    panier = models.ForeignKey(Panier, blank=False, null=False)\n    class Meta:\n        app_label = 'Commun'", "def predict(model, X_test, y_test):\n    classes = np.unique(y_test)\n    n_classes = classes.shape[0]\n    joint_log_likelihood = []\n    for i in range(n_classes):\n        jointi = np.log(model['class_prior'][i])\n        n_ij = - 0.5 * np.sum(np.log(2. * np.pi * model['var'][i, :]))\n        n_ij -= 0.5 * np.sum(((X_test - model['mean'][i, :]) ** 2) /\n                             (model['var'][i, :]), 1)\n        joint_log_likelihood.append(jointi + n_ij)", "largest = i\nif left_subtree < self.heap_size and \\\n   self.heap[left_subtree] > self.heap[i]:\n    largest = left_subtree\nif right_subtree < self.heap_size and \\\n   self.heap[right_subtree] > self.heap[largest]:\n    largest = right_subtree\nif largest != i:\n    (self.heap[i], self.heap[largest]) = (self.heap[largest], self.heap[i])\n    self.heapify(largest)", "from flask import Blueprint, render_template, request, jsonify, Response, abort\nfrom jinja2 import TemplateNotFound\nfrom functools import wraps\nfrom sqlalchemy import or_\nfrom psiturk.psiturk_config import PsiturkConfig\nfrom psiturk.experiment_errors import ExperimentError\nfrom psiturk.user_utils import PsiTurkAuthorization\nfrom psiturk.db import db_session, init_db\nfrom psiturk.models import Participant", "try:\n    i = 0\n    for pt in pts:\n        message = '' + str(i) + ',' + (\"%8f\" % pt[0]) + ',' + (\"%8f\" % pt[1])\n        sock.sendall(message)\n        i = i + 1\n        if(i == 10):\n            break\nexcept:\n    pass", "tipos_values = []\nfor row in results:\n    if (row[0] != ''):\n        label = '''%s (%s)''' % (row[0], row[1][0][0])\n        tipos.append(label)\n        tipos_values.append(row[1][0][0])\nchart = PieChart2D(800, 350)\nchart.set_title('E-MAILS POR TIPOS DE ALERTA')\nchart.add_data(tipos_values)\nchart.set_legend(tipos)", "import linked_list as lst\ndef kth_to_last(k, lst):\n  cur_pos = 0\n  leading_node = lst.head\n  trailing_node = lst.head", "from django.db import models\nfrom django.utils import timezone\nimport datetime\nclass Question(models.Model):\n    question_text=models.CharField(max_length=200)\n    pub_date=models.DateTimeField('date published')\n    def __str__(self):# __unicode__ on Python 2\n        return self.question_text", "if not fixed_tokens:\n  last_type = end_token.previous\nwhile last_type.string.isspace():\n  last_type = last_type.previous\nif last_type.type != Type.DOC_END_BRACE:\n  trailing_space = (len(last_type.string) -\n                    len(last_type.string.rstrip()))\n  if trailing_space:\n    tokenutil.SplitToken(last_type,\n                         len(last_type.string) - trailing_space)", "import sqlite3, sha, time, Cookie, os, datetime, hashlib\nfrom bottle import get, post, route, debug, run, template, request\nfrom bottle import static_file, url, response, redirect, install\nfrom bottle_redis import RedisPlugin\nimport constants, account", "cursor.callproc('test')\ncursor._cursor.valid = False\nself.assert_(not cursor.valid)\nself.assertRaises(InternalError, cursor._cursor.callproc, 'test')\ncursor.callproc('test')\nself.assert_(cursor.valid)\ncursor._cursor.callproc('test')\nself.assertEqual(db._usage, 2)\nself.assertEqual(db._con.num_uses, 3)\ndb._con.valid = cursor._cursor.valid = False", "import socket  \ns = socket.socket()   \ns.bind((\"localhost\", 8000))  \ns.listen(1)  \nsc, addr = s.accept()  ", "for c in Category.objects.all():\n\tif c.name == 'Python':\n\t\tc.likes = 64\n\t\tc.views = 128\n\tif c.name == 'Django':\n\t\tc.likes = 32\n\t\tc.views = 64\n\tif c.name == 'Other Frameworks':\n\t\tc.likes = 16\n\t\tc.views = 32", "from zope import component\nfrom zope.interface.interfaces import IInterface\nfrom collective.flowplayer.interfaces import IFlowPlayerSite\nfrom Products.CMFCore.utils import getToolByName\ndef install(context):\n    if context.readDataFile('raptus.article.media_install.txt') is None:\n        return\n    portal = context.getSite()\n    manager = component.getSiteManager()", "num_routes_cache = {}\ndef num_routes(coord):\n    if 0 in coord:\n        return 1\n    else:\n        if num_routes_cache.has_key(coord):\n            return num_routes_cache[coord]\n        else:\n            right = (coord[0] - 1, coord[1])\n            down = (coord[0], coord[1] - 1)", "import sys, os\nimport hashlib\nimport stat\nimport subprocess\nif len(sys.argv) < 1:\n    print(\"Error, rpm command not specified\")\n    sys.exit(1)\nif len(sys.argv) < 2:\n    print(\"Error, no paths specified\")\n    sys.exit(1)", "from twisted.web.resource import Resource\nfrom twisted.web.server import Site\nfrom twisted.web.static import File\nfrom twisted.internet import reactor\nclass RESTfulApi(object):\n    def __init__(self):\n        self.root = File(\"web\")\n        self.api = Resource()\n        self.root.putChild(\"api\", self.api)\n        factory = Site(self.root)", "roof.image = pygame.Surface((roof.rect.width, roof.rect.height))\nroof.image.fill((0,255,0))\nwall = WorldSprite(64, 450, 300, 32)\nwall.image = pygame.Surface((wall.rect.width, wall.rect.height))\nwall.image.fill((0,255,0))\nleftWall = WorldSprite(0, 32, 32, size[1]-64)\nleftWall.image = pygame.Surface((leftWall.rect.width, leftWall.rect.height))\nleftWall.image.fill((0,255,0))\nrightWall = WorldSprite(size[0]-32, 32, 32, size[1]-64)\nrightWall.image = pygame.Surface((rightWall.rect.width, rightWall.rect.height))", "import config\ntry:\n    import uwsgi as _uwsgi\n    import uwsgidecorators as _uwsgidecorators\nexcept ImportError:\n    import_error = True\n    if not config.standalone:\n        raise\nelse:\n    import_error = False", "ProcessList = ['Socket', 'Monitor', 'Scan', 'TagCheck']\nps = []\nmultiprocessing.freeze_support()\nfor i in range(0, len(ProcessList)):\n    ps.append(eval(ProcessList[i])())\n    ps[i].start()\nwhile True:\n    for i in range(0, len(ProcessList)):\n        if ps[i].is_alive() == False:\n            ps[i] = eval(ProcessList[i])()", "from random import shuffle\nfrom ants import *\nclass RandomBot:\n    def do_turn(self, ants):\n        destinations = []", "from scipy import arange\nfrom numpy import pi\nfrom pylab import cos\nfreq = 1.0\nsam_rate=44100.0\nN     = 4096\nT     = arange(0.0,float(N),1.0)\nxArray = cos(2.0*pi*freq*T/sam_rate) * 256\nxArray.astype(int)\nchunk = 1024", "from yapsy.IPlugin import IPlugin\nfrom lib.methods import BaseMethod\nclass IMethodPlugin(BaseMethod, IPlugin):\n  def __init__(self):\n    pass", "self.forward = wx.Button(self, label=\"Forward\")\nself.reload = wx.Button(self, label = \"Refresh\")\nself.result = None\naddressarea = wx.BoxSizer()\naddressarea.Add(self.address, proportion = 1, border = 0)\naddressarea.Add(self.go, proportion = 0, border = 0)\naddressarea.Add(self.back, proportion = 0, border = 0)\naddressarea.Add(self.forward, proportion = 0, border = 0)\naddressarea.Add(self.reload, proportion = 0, border =0)\nsizer.Add(addressarea, proportion = 0, flag = wx.EXPAND, border = 0)", "from spiralear.website import models as m\nclass UrlInline(admin.TabularInline):\n    model = m.Url\n    max_num = 3\nclass PageAdmin(admin.ModelAdmin):\n    def get_name(self):\n        return self.__unicode__()\n    get_name.short_description = \"Strona\"\n    get_name.admin_order_field = \"parent\"\n    list_display = (get_name,)", "import sys, os\nsys.path.insert(0, '/usr/local/google_appengine')\nsys.path.insert(0, os.path.abspath(os.path.join('..', '..')))\nfrom google.appengine.ext import db\nextensions = ['sphinx.ext.autodoc']"]