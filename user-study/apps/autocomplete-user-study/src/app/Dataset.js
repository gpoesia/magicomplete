export default [
    "from matplotlib import pyplot as plt",
    'expectedresult1 = np.array(',
    'link = filehandle.geturl()',
    'p.add_option("-p","--pass",dest="password",default="test")',
    "contenido += 'Comunicarse a: ' + formulario.cleaned_data['correo']",
    'client = paramiko.SSHClient()',
    'def called_with(self, workflow, parameters):',
    'append(secrets_file,  "            \'USER\': \'%s\'," % (db_user,))',
    'import httplib',
    "(10, 18, 'Alaska Day'),",
    "('AT+CSVM', (c[4], 'Set Voice Mail Number')),",
    "print 'SHA1 hash of input file:', hashfile(filename)",
    'def testDongerResponds(self):',
    '3. Press hotkey to open explorer',
    'pass',
    'r.sendSMB(smbPack)',
    'WP_ITEMS.append(acc_info)',
    'self.amount = float(value)',
    "f.write(':')",
    'class AppengineDjangoTest(unittest.TestCase):',
    'self.set_license(st)',
    "model_name='app',",
    'from ..constants.mcs_indices import tables, HT_AGGREGATE_TABLE',
    'class DataError(DatabaseError): pass',
    "return '<%s%s />'%(self.name,attr)",
    "of ``'html'``, ``'text'`` or ``'xhtml'``.",
    'plt.subplot(3,3,i*3+2),plt.hist(images[i*3].ravel(),256)',
    'from mezzanine.core.views import direct_to_template',
    'class alt_dummy_bad(uh.StaticHandler):',
    'from stgit.run import *',
    'def is_repository_initialized(directory):',
    'else:',
    'from django.contrib import admin',
    "w.knob('colorspace').setValue('srgb')",
    'for i in range(1, len(path)-1):',
    'import random',
    'self.chart.strands[4].fillColor  = None',
    'Library for manipulating Excel 2007+ workbooks',
    'import random',
    'print "[!] Missing a dictionary..."',
    'def damage(self):',
    'def explore_synsets(word):',
    'def __del__(self):',
    'self.debug_logger("len(ftp_dir_list)",len(set(ftp_hdf_list)))',
    'A sequence of (k, v) typles or a :class:`dict` of (k, v) to format as',
    'self.remote.api.sync(self.options.get("verbose", False), logger=self.logger)',
    'def hubHerder(self):',
    'def index():',
    "header += struct.pack('!c', '\\x00')  # window",
    'In this example reactor is started implicitly upon the first',
    'finally:',
    'doctest.testmod()',
    'if int(d[7]) == 1:',
    'return (gcd, x, y)',
    "urlpatterns = patterns('',",
    'self.clicked.emit(self.Fc)',
    'from cr_cache.tests import TestCase',
    'req = MyRequest(env)',
    'def backwards(self, orm):',
    "return '%s Min %s Sec' % (int(math.floor(self.DURATION / 60)), self.DURATION%60)",
    'self._color = [1,1,1]',
    'from __future__ import unicode_literals',
    'import os',
    'import numpy',
    'PUPPETCA = "/usr/sbin/puppetca"',
    'else :',
    'maxiter = 100;',
    "title_sel=('property', 'og:title'),",
    'redis_errors += 1',
    'print ("Channel 3: %02f" % getadcreading(adc_address1, adc_channel3))',
    'h5_output = h5py.File(outputfnames+FLAG+\'_output\'+\'.hdf5\',"w")',
    'def pca(dataMat, topNfeat=9999999):',
    'node_attrs[attr] = element.findtext(attr)',
    'LetStim.draw()',
    'self.end(parent, content)',
    'query: string, query part of the request URI',
    'def __delitem__(self, id):',
    'ra = [[0.0 for x in range(3)] for y in range(3)]',
    'f.choices.sort()',
    'self.__entry_file_wizard.connect("changed", self.update_file_wizard)',
    'else:',
    "url(r'^(?P<pk>[0-9]*)/show/$', 'zones_show'),",
    'shadowWarning = forms.IntegerField(',
    'from books.models import Publisher',
    "route_obj = self.pool.get('stock.location.route')",
    'Latin5_BulgarianCharToOrderMap = ( \\',
    "new_change_point.value = '|'.join(sorted_result_list)",
    'class IntegrityError(DatabaseError):',
    'attached, which cocotb ensures by default.',
    "yottadir = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', '..')",
    '_registry = {}',
    'from ranger.api.commands import Command',
    'question = models.ForeignKey(Question)',
    'from pylab import *',
    'and g.id = h.gametypeid',
    'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the',
    'w.add(p)',
    'def test_detail(self):',
    'for i in lst:',
    'for i in emails:',
    "m = Manager('input', 'output/movies', 'output/series', extentions);",
    'from django import template',
    '("EGG-INFO", [',
    'main()',
    'self.assertEqual(expected_el.tag, actual_el.tag)',
    'if not isString(node):',
    'Example: ::',
    "urlpatterns = patterns('',",
    'self.assertEqual(previous, result)',
    'self.help_dir = None',
    "__license__ = 'GPL'",
    'NUMBER_SHREDS = num_shreds',
    'def process(self, data):',
    'def relative_urls_from_filesystem(root_dir, prepend_path):',
    'def listdirs():',
    'Gets db connection',
    'def makeId(self,x,y,d):',
    'os.unlink(old)',
    'def test_search_query3 (self):',
    "raise(TypeError, 'unorderable types: %r < %r' % (self, other))",
    'parser.add_option("--gh", "--grid_hostname", dest="ghost",',
    'VALUES',
    'import vrpn',
    "for message in orm.Message.objects.filter(text__contains='\\n'):",
    'from tardis.counting_t.mod2 import class2',
    '@property',
    'return',
    'ncb.Lana_num = ord(adapters.lana[i])',
];